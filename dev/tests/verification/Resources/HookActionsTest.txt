<?php
namespace Magento\AcceptanceTest\_default\Backend;

use Magento\FunctionalTestingFramework\AcceptanceTester;
use Magento\FunctionalTestingFramework\DataGenerator\Handlers\DataObjectHandler;
use Magento\FunctionalTestingFramework\DataGenerator\Persist\DataPersistenceHandler;
use Magento\FunctionalTestingFramework\DataGenerator\Objects\EntityDataObject;
use Magento\FunctionalTestingFramework\Extension\TestContextExtension;
use \Codeception\Util\Locator;
use Yandex\Allure\Adapter\Annotation\Features;
use Yandex\Allure\Adapter\Annotation\Stories;
use Yandex\Allure\Adapter\Annotation\Title;
use Yandex\Allure\Adapter\Annotation\Description;
use Yandex\Allure\Adapter\Annotation\Parameter;
use Yandex\Allure\Adapter\Annotation\Severity;
use Yandex\Allure\Adapter\Model\SeverityLevel;
use Yandex\Allure\Adapter\Annotation\TestCaseId;

/**
 */
class HookActionsTestCest
{
	/**
	  * @var DataPersistenceHandler $sampleCreateBefore;
	  */
	protected $sampleCreateBefore;

	/**
	  * @var DataPersistenceHandler $sampleCreateForAfter;
	  */
	protected $sampleCreateForAfter;

	/**
	  * @param AcceptanceTester $I
	  * @throws \Exception
	  */
	public function _before(AcceptanceTester $I)
	{
		TestContextExtension::setTestPhase(TestContextExtension::TEST_PHASE_BEFORE);
		$I->amGoingTo("create entity that has the stepKey: sampleCreateBefore");
		$sampleCreatedEntity = DataObjectHandler::getInstance()->getObject("sampleCreatedEntity");
		$this->sampleCreateBefore = new DataPersistenceHandler($sampleCreatedEntity, []);
		$this->sampleCreateBefore->createEntity();
		$I->amGoingTo("delete entity that has the createDataKey: sampleCreateBefore");
		$this->sampleCreateBefore->deleteEntity();
		$I->amGoingTo("create entity that has the stepKey: sampleCreateForAfter");
		$sampleCreatedEntity = DataObjectHandler::getInstance()->getObject("sampleCreatedEntity");
		$this->sampleCreateForAfter = new DataPersistenceHandler($sampleCreatedEntity, []);
		$this->sampleCreateForAfter->createEntity();
	}

	/**
	  * @var DataPersistenceHandler $sampleCreateAfter;
	  */
	protected $sampleCreateAfter;

	/**
	  * @param AcceptanceTester $I
	  * @throws \Exception
	  */
	public function _after(AcceptanceTester $I)
	{
		TestContextExtension::setTestPhase(TestContextExtension::TEST_PHASE_AFTER);
		$I->amGoingTo("create entity that has the stepKey: sampleCreateAfter");
		$sampleCreatedEntity = DataObjectHandler::getInstance()->getObject("sampleCreatedEntity");
		$this->sampleCreateAfter = new DataPersistenceHandler($sampleCreatedEntity, []);
		$this->sampleCreateAfter->createEntity();
		$I->amGoingTo("delete entity that has the createDataKey: sampleCreateForAfter");
		$this->sampleCreateForAfter->deleteEntity();
	}

	/**
	  * @param AcceptanceTester $I
	  * @throws \Exception
	  */
	public function _failed(AcceptanceTester $I)
	{
		$I->saveScreenshot();
		if (TestContextExtension::getTestPhase() !==TestContextExtension::TEST_PHASE_AFTER) {
			try {
				$this->_after($I);
			} catch (\Exception $failedException) {
			}
		}
	}

	/**
	 * @Parameter(name = "AcceptanceTester", value="$I")
	 * @param AcceptanceTester $I
	 * @return void
	 * @throws \Exception
	 */
	public function HookActionsTest(AcceptanceTester $I)
	{
		TestContextExtension::setTestPhase(TestContextExtension::TEST_PHASE_TEST);
	}
}
