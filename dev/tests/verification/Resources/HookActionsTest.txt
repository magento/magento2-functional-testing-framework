<?php
namespace Magento\AcceptanceTest\_default\Backend;

use Magento\FunctionalTestingFramework\AcceptanceTester;
use Magento\FunctionalTestingFramework\DataGenerator\Handlers\CredentialStore;
use Magento\FunctionalTestingFramework\DataGenerator\Handlers\PersistedObjectHandler;
use \Codeception\Util\Locator;
use Yandex\Allure\Adapter\Annotation\Features;
use Yandex\Allure\Adapter\Annotation\Stories;
use Yandex\Allure\Adapter\Annotation\Title;
use Yandex\Allure\Adapter\Annotation\Description;
use Yandex\Allure\Adapter\Annotation\Parameter;
use Yandex\Allure\Adapter\Annotation\Severity;
use Yandex\Allure\Adapter\Model\SeverityLevel;
use Yandex\Allure\Adapter\Annotation\TestCaseId;

/**
 */
class HookActionsTestCest
{
	/**
	  * @param AcceptanceTester $I
	  * @throws \Exception
	  */
	public function _before(AcceptanceTester $I)
	{
		$I->comment("[sampleCreateBefore] create 'sampleCreatedEntity' entity");
		PersistedObjectHandler::getInstance()->createEntity(
			"sampleCreateBefore",
			"hook",
			"sampleCreatedEntity",
			[],
			[]
		);

		$I->comment("[sampleDeleteBefore] delete entity 'sampleCreateBefore'");
		PersistedObjectHandler::getInstance()->deleteEntity(
			"sampleCreateBefore",
			"hook"
		);

		$I->comment("[sampleCreateForAfter] create 'sampleCreatedEntity' entity");
		PersistedObjectHandler::getInstance()->createEntity(
			"sampleCreateForAfter",
			"hook",
			"sampleCreatedEntity",
			[],
			[]
		);

	}

	/**
	  * @param AcceptanceTester $I
	  * @throws \Exception
	  */
	public function _after(AcceptanceTester $I)
	{
		$I->comment("[sampleCreateAfter] create 'sampleCreatedEntity' entity");
		PersistedObjectHandler::getInstance()->createEntity(
			"sampleCreateAfter",
			"hook",
			"sampleCreatedEntity",
			[],
			[]
		);

		$I->comment("[sampleDeleteAfter] delete entity 'sampleCreateForAfter'");
		PersistedObjectHandler::getInstance()->deleteEntity(
			"sampleCreateForAfter",
			"hook"
		);

	}

	/**
	  * @param AcceptanceTester $I
	  * @throws \Exception
	  */
	public function _failed(AcceptanceTester $I)
	{
		$I->saveScreenshot(); // stepKey: saveScreenshot
	}

	/**
	 * @Features({"TestModule"})
	 * @Parameter(name = "AcceptanceTester", value="$I")
	 * @param AcceptanceTester $I
	 * @return void
	 * @throws \Exception
	 */
	public function HookActionsTest(AcceptanceTester $I)
	{
	}
}
